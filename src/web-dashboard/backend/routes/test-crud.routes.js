const express = require('express');
const router = express.Router();
const Disaster = require('../models/Disaster');

// Temporary test routes WITHOUT authentication for Postman testing
// These routes mirror the admin routes but without auth middleware

// TEST CREATE - Create a new disaster
router.post('/test-create', async (req, res) => {
  try {
    console.log('🧪 TEST CREATE - Request received:', JSON.stringify(req.body, null, 2));
    
    const {
      title, type, severity, description, location,
      zones = [], priority_level, incident_commander, contact_number,
      public_alert, evacuation_required
    } = req.body;

    // Basic validation with detailed error messages
    if (!title || !type || !severity || !description) {
      const missing = [];
      if (!title) missing.push('title');
      if (!type) missing.push('type');
      if (!severity) missing.push('severity');
      if (!description) missing.push('description');
      
      return res.status(400).json({
        success: false,
        message: `Missing required fields: ${missing.join(', ')}`,
        received_fields: Object.keys(req.body),
        test_note: 'Required fields: title, type, severity, description'
      });
    }

    // Validate location if provided
    if (location && (!location.lat || !location.lng)) {
      return res.status(400).json({
        success: false,
        message: 'Location must include lat and lng coordinates',
        test_note: 'Location format: { lat: number, lng: number, address?: string }'
      });
    }

    // Create disaster with test data
    const disaster = new Disaster({
      title, type, severity, description, location,
      zones, priority_level: priority_level || 'medium',
      incident_commander, contact_number,
      public_alert: public_alert !== undefined ? public_alert : true,
      evacuation_required: evacuation_required || false,
      status: 'active'
      // Note: created_by is optional for test purposes
      // Note: disaster_code will be auto-generated by pre-save hook
    });

    await disaster.save();
    
    console.log('✅ TEST CREATE - Disaster created:', disaster.disaster_code);

    res.status(201).json({
      success: true,
      data: disaster,
      message: 'Test disaster created successfully',
      test_note: 'This was created via test endpoint (no auth required)'
    });
  } catch (error) {
    console.error('❌ TEST CREATE - Error:', error.message);
    res.status(400).json({
      success: false,
      message: error.message,
      test_note: 'Error in test create endpoint'
    });
  }
});

// TEST READ - Get all disasters
router.get('/test-read', async (req, res) => {
  try {
    console.log('🧪 TEST READ - Request received with query:', req.query);
    
    const { limit = 5, page = 1 } = req.query;
    
    const disasters = await Disaster.find({})
      .sort({ createdAt: -1 })
      .limit(parseInt(limit))
      .skip((page - 1) * limit);

    const total = await Disaster.countDocuments({});
    
    console.log(`✅ TEST READ - Found ${disasters.length} disasters`);

    res.json({
      success: true,
      data: disasters,
      pagination: {
        total,
        page: parseInt(page),
        limit: parseInt(limit),
        pages: Math.ceil(total / limit)
      },
      test_note: 'This was fetched via test endpoint (no auth required)'
    });
  } catch (error) {
    console.error('❌ TEST READ - Error:', error.message);
    res.status(500).json({
      success: false,
      message: error.message,
      test_note: 'Error in test read endpoint'
    });
  }
});

// TEST UPDATE - Update a disaster
router.put('/test-update/:id', async (req, res) => {
  try {
    console.log('🧪 TEST UPDATE - Request for ID:', req.params.id);
    console.log('🧪 TEST UPDATE - Update data:', JSON.stringify(req.body, null, 2));
    
    const updateData = { ...req.body };
    delete updateData._id; // Remove _id from update data
    
    updateData.updated_by = 'test-admin-user'; // Mock admin user

    const disaster = await Disaster.findByIdAndUpdate(
      req.params.id,
      updateData,
      { new: true, runValidators: true }
    );

    if (!disaster) {
      return res.status(404).json({
        success: false,
        message: 'Disaster not found',
        test_note: 'ID not found in test update'
      });
    }

    console.log('✅ TEST UPDATE - Disaster updated:', disaster.disaster_code);

    res.json({
      success: true,
      data: disaster,
      message: 'Test disaster updated successfully',
      test_note: 'This was updated via test endpoint (no auth required)'
    });
  } catch (error) {
    console.error('❌ TEST UPDATE - Error:', error.message);
    res.status(400).json({
      success: false,
      message: error.message,
      test_note: 'Error in test update endpoint'
    });
  }
});

// TEST DELETE - Archive a disaster
router.delete('/test-delete/:id', async (req, res) => {
  try {
    console.log('🧪 TEST DELETE - Request for ID:', req.params.id);
    
    const disaster = await Disaster.findByIdAndUpdate(
      req.params.id,
      { 
        status: 'archived',
        updated_by: 'test-admin-user' // Mock admin user
      },
      { new: true }
    );

    if (!disaster) {
      return res.status(404).json({
        success: false,
        message: 'Disaster not found',
        test_note: 'ID not found in test delete'
      });
    }

    console.log('✅ TEST DELETE - Disaster archived:', disaster.disaster_code);

    res.json({
      success: true,
      data: disaster,
      message: 'Test disaster archived successfully',
      test_note: 'This was archived via test endpoint (no auth required)'
    });
  } catch (error) {
    console.error('❌ TEST DELETE - Error:', error.message);
    res.status(500).json({
      success: false,
      message: error.message,
      test_note: 'Error in test delete endpoint'
    });
  }
});

// TEST GET ONE - Get specific disaster
router.get('/test-get-one/:id', async (req, res) => {
  try {
    console.log('🧪 TEST GET ONE - Request for ID:', req.params.id);
    
    const disaster = await Disaster.findById(req.params.id);

    if (!disaster) {
      return res.status(404).json({
        success: false,
        message: 'Disaster not found',
        test_note: 'ID not found in test get one'
      });
    }

    console.log('✅ TEST GET ONE - Disaster found:', disaster.disaster_code);

    res.json({
      success: true,
      data: disaster,
      computed: {
        total_affected_population: disaster.zones.reduce((sum, zone) => sum + (zone.estimated_population || 0), 0),
        total_area_km2: disaster.zones.reduce((sum, zone) => sum + (zone.area_km2 || 0), 0),
        zone_count: disaster.zones.length
      },
      test_note: 'This was fetched via test endpoint (no auth required)'
    });
  } catch (error) {
    console.error('❌ TEST GET ONE - Error:', error.message);
    res.status(500).json({
      success: false,
      message: error.message,
      test_note: 'Error in test get one endpoint'
    });
  }
});

// Helper endpoint to list all disasters with their IDs for easy testing
router.get('/test-list-ids', async (req, res) => {
  try {
    const disasters = await Disaster.find({})
      .select('_id disaster_code title type severity status')
      .sort({ createdAt: -1 })
      .limit(10);

    res.json({
      success: true,
      data: disasters.map(d => ({
        id: d._id,
        disaster_code: d.disaster_code,
        title: d.title,
        type: d.type,
        severity: d.severity,
        status: d.status
      })),
      message: 'List of disaster IDs for testing',
      test_note: 'Use these IDs for UPDATE, DELETE, and GET ONE tests'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message
    });
  }
});

module.exports = router;
